CREATE DATABASE zyz_hypermarket;
USE zyz_hypermarket;

-- ----------------------------
-- GENERAL NOTES TO ALL:
--  All numeric value must be in 2 decimal places.


CREATE TABLE itemcategory (  -- /
  iccode INT PRIMARY KEY AUTO_INCREMENT,
  icdescription VARCHAR(255) NOT NULL
);
ALTER TABLE itemcategory AUTO_INCREMENT = 101;
--  Item category code is automatically generated by the system with running number starting 
-- from 101. / 
-- item details must reflect to all item category that exist in the system.
-- one of items must have â€˜Home Appliancesâ€™

-- insertion to item category table:
INSERT INTO itemcategory (icdescription)
VALUES 
('Electronics'), 
('Clothing'), 
('Toys'), 
('Beauty Products'), 
('Home Appliances');
-- -------------------------------------------------------------------------
CREATE TABLE item (  --  /
  itmcode VARCHAR(10) PRIMARY KEY,
  itmdesc VARCHAR(255) NOT NULL,
  iccode INT NOT NULL,
  avgmthlyusage DECIMAL(9,2) NOT NULL,
  reorderlevel INT NOT NULL,
  reorderqty INT NOT NULL,
  FOREIGN KEY (iccode) REFERENCES itemcategory(iccode) ON UPDATE CASCADE
);
-- item code which the first character start from â€˜Gâ€™.
-- item details must reflect to all item category that exist in the system.

-- insertion to item table:
INSERT INTO item (itmcode, itmdesc, iccode, avgmthlyusage, reorderlevel, reorderqty)
VALUES ('A001', 'Item 1', 101, 50, 100, 200),
       ('B002', 'Item 2', 102, 75, 150, 300),
       ('C003', 'Item 3', 103, 100, 200, 400),
       ('D004', 'Item 4', 104, 125, 250, 500),
       ('E005', 'Item 5', 105, 150, 300, 600),
       ('F006', 'Item 6', 101, 175, 350, 700),
       ('G007', 'Item 7', 102, 200, 400, 800),
       ('G008', 'Item 8', 103, 225, 450, 900),
       ('G009', 'Item 9', 104, 250, 500, 1000),
       ('H010', 'Item 10', 105, 275, 550, 1100);
-- -------------------------------------------------------------------------
CREATE TABLE itemstock (  -- /
  itmcode VARCHAR(10) NOT NULL,
  stkcountdate DATE NOT NULL,
  qtystock INT NOT NULL,
  stkcountstatus ENUM('Closed', 'Opened') NOT NULL,
  PRIMARY KEY (itmcode, stkcountdate),
  FOREIGN KEY (itmcode) REFERENCES item(itmcode) ON UPDATE CASCADE
);
-- ------
--  For stock count, item code and stock count date must be define unique and mandatory for 
-- both attributes.
-- ------
--  Stock count status only can be presented as â€˜Closedâ€™ and â€˜Openedâ€™. When the stock count 
-- process completely done, count status will be changed to â€˜Closedâ€™ and the current stocks are 
-- not allowed for inventory transaction.
-- insertion to item stock table:
INSERT INTO itemstock (itmcode, stkcountdate, qtystock, stkcountstatus)
VALUES ('A001', '2022-01-01', 164, 'Opened'),
       ('B002', '2022-01-02', 150, 'Opened'),
       ('C003', '2022-01-03', 200, 'Opened'),
       ('D004', '2022-01-04', 500, 'Closed'),
       ('E005', '2022-01-05', 300, 'Opened'),
       ('F006', '2022-01-06', 350, 'Opened'),
       ('G007', '2022-01-07', 400, 'Opened'),
       ('G008', '2022-01-08', 450, 'Opened'),
       ('G009', '2022-01-09', 800, 'Opened'),
       ('H010', '2022-01-10', 550, 'Opened');
-- -------------------------------------------------------------------------
CREATE TABLE supplier (  -- /
  suppid INT PRIMARY KEY AUTO_INCREMENT,
  suppname VARCHAR(50) NOT NULL,
  suppemail VARCHAR(50) NOT NULL,
  suppofficeno VARCHAR(20) NOT NULL,
  supphpno VARCHAR(20) NOT NULL
);
ALTER TABLE supplier AUTO_INCREMENT = 300001;

--  Supplier id is automatically generated by the system with running number starting from 
-- 300001.  /
--  supplier code format 300001.
-- insertion to supplier table:
INSERT INTO supplier (suppname, suppemail, suppofficeno, supphpno)
VALUES ('GDEX', 'GDEX@example.com', '123-456-7890', '098-765-4321'),
       ('POSLAJU', 'POSLAJU@example.com', '234-567-8901', '210-987-6543'),
       ('HDEX', 'HDEX@example.com', '345-678-9012', '321-098-7654'),
       ('IDEX', 'IDEX@example.com', '456-789-0123', '432-109-8765'),
       ('ADEX', 'ADEX@example.com', '567-890-1234', '543-210-9876');
-- -------------------------------------------------------------------------
CREATE TABLE itemsupplier (  --  /
  itmcode VARCHAR(10) NOT NULL,
  suppid INT NOT NULL,
  totqtysupptodate INT NOT NULL,
  firstdatesupply DATE NOT NULL,
  lastdatesupply DATE NOT NULL,
  stdprice DECIMAL(9,2) NOT NULL,
  discount DECIMAL(9,2) NOT NULL,
  minorderqty INT NOT NULL,
  maxorderqty INT NOT NULL,
  PRIMARY KEY (itmcode, suppid),
  FOREIGN KEY (itmcode) REFERENCES item(itmcode) ON UPDATE CASCADE,
  FOREIGN KEY (suppid) REFERENCES supplier(suppid) ON UPDATE CASCADE
);
-- The combination of item code and supplier id must be unique.  /
--  Find the suppliers who supplied the item for every item code that exist in the system.
INSERT INTO itemsupplier (itmcode, suppid, totqtysupptodate, firstdatesupply, 
lastdatesupply, stdprice, discount, minorderqty, maxorderqty)
VALUES 
('A001', 300001, 100, '2022-01-01', '2022-01-31', 500, 0.1, 50, 200),
('B002', 300002, 200, '2022-02-01', '2022-02-28', 250, 0.05, 100, 300),
('C003', 300003, 300, '2022-03-01', '2022-03-31', 130, 0.05, 150, 600),
('D004', 300004, 400, '2022-04-01', '2022-04-30', 240, 0.05, 200, 350),
('E005', 300005, 500, '2022-05-01', '2022-05-31', 550, 0.05, 250, 250),
('F006', 300002, 600, '2022-06-01', '2022-06-30', 460, 0.06, 300, 300),
('G007', 300003, 700, '2022-07-01', '2022-07-31', 370, 0.07, 350, 500),
('G008', 300003, 800, '2022-08-01', '2022-08-31', 480, 0.1, 400, 360),
('G009', 300001, 900, '2022-09-01', '2022-09-30', 390, 0.1, 450, 600),
('H010', 300004, 1000, '2022-10-01', '2022-10-31', 600, 0.06, 500, 485);
-- -------------------------------------------------------------------------
CREATE TABLE supplieraddress (  --  /
  suppaddid INT PRIMARY KEY AUTO_INCREMENT,
  suppid INT NOT NULL,
  addr1 VARCHAR(255) NOT NULL,
  city VARCHAR(20) NOT NULL,
  postcode VARCHAR(10) NOT NULL,
  state VARCHAR(20) NOT NULL,
  FOREIGN KEY (suppid) REFERENCES supplier(suppid)
);
ALTER TABLE supplieraddress AUTO_INCREMENT =2001;

INSERT INTO supplieraddress (suppid, addr1, city, postcode, state)
VALUES (300001, '123 Jalan Tun Razak', 'Kuala Lumpur', '50400', 'Kuala Lumpur'),
       (300002, '456 Jalan Dato Onn', 'Johor Bahru', '80990', 'Johor'),
       (300003, '789 Jalan Tunku Abdul Rahman', 'Kota Kinabalu', '88999', 'Sabah'),
       (300004, '246 Jalan Perak', 'Kuala Terengganu', '20200', 'Terengganu'),
       (300005, '369 Jalan Sultan Ismail', 'Petaling Jaya', '47300', 'Selangor');
-- -------------------------------------------------------------------------
	-- sub id must change to syncronize with the supplier info
--  Supplier address id is automatically generated by the system with running number starting 
-- from 2001.  /

-- -----------------
-- TASK 4

-- 1. Retrieve item code, item description, last stock count date and stock quantity that take place 
-- from the system for item code which the first character start from â€˜Gâ€™. 
SELECT i.itmcode, i.itmdesc, s.stkcountdate,s.qtystock FROM item  AS i 
INNER JOIN itemstock AS s ON i.itmcode = s.itmcode
WHERE i.itmcode LIKE 'G%';
-- --------------------------------------------------------------------------------------------------
-- 2. Display supplier name and details address for supplier code 300001.
SELECT s.suppname AS 'Name', a.addr1 AS Address, a.city,a.state, a.postcode
FROM  supplier AS s 
INNER JOIN supplieraddress AS a ON s.suppid = a.suppid
WHERE s.suppid = 300001;

-- --------------------------------------------------------------------------------------------------
-- 3. Find the suppliers who supplied the item for every item code that exist in the system. You 
-- should display supplier id, name, item code, item description and last date supply for that item.
-- [Hint: use right outer join]
SELECT s.suppid, s.suppname, isu.itmcode, i.itmdesc, isu.lastdatesupply FROM supplier AS s
RIGHT JOIN itemsupplier AS isu ON s.suppid = isu.suppid 
RIGHT JOIN item AS i ON isu.itmcode = i.itmcode;
-- --------------------------------------------------------------------------------------------------
-- 4. Display item category, description, item code, description, and reorder quantity where all the 
-- item details must reflect to all item category that exist in the system. [Hint: use left outer join].
SELECT ic.iccode, ic.icdescription, i.itmcode, i.itmdesc, i.reorderqty FROM itemcategory AS ic
LEFT OUTER JOIN item AS i ON ic.iccode = i.iccode;
insert into itemcategory (icdescription) values('Testing'); -- to check if the outer join work or not ðŸ˜ƒ
-- --------------------------------------------------------------------------------------------------
-- 5. Retrieve supplier code, supplier name, item code, description and last date supply for supplier 
-- code 300005. You should use USING operator in constructing SQL DML command.
SELECT suppid, suppname, itmcode, itmdesc, lastdatesupply FROM supplier
INNER JOIN itemsupplier USING (suppid) 
INNER JOIN item USING (itmcode)
WHERE suppid = 300005;
-- --------------------------------------------------------------------------------------------------
-- 6. Display item code, description and current stock for item category that belong to â€˜Home 
-- Appliancesâ€™. Rename the header of each attribute as ProductCode, ProductName and 
-- StockOnHand when populating your records.
SELECT 
itmcode AS 'ProductCode', 
itmdesc AS 'ProductName', 
qtystock AS 'StockOnHand'
FROM itemcategory 
RIGHT JOIN item USING (iccode) RIGHT JOIN itemstock USING(itmcode)
WHERE icdescription ='Home Appliances';
-- --------------------------------------------------------------------------------------------------
-- 7. Retrieve supplier address id, supplier id, address and state for all supplier that located at the 
-- same state and posses different supplier address id. You should sorting the records based on 
-- state, followed by supplier id.
SELECT suppaddid, suppid, addr1, state
FROM supplier right outer JOIN supplieraddress USING (suppid)
WHERE state IN (SELECT state FROM supplieraddress GROUP BY state HAVING COUNT(*) > 1)
AND suppaddid IN (SELECT suppaddid FROM supplieraddress GROUP BY suppaddid HAVING COUNT(*) = 1)
ORDER BY state, suppaddid;

INSERT INTO supplieraddress values (DEFAULT,300005, '123 Jalan Mohemmed', 'Kuala Lumpur', '50140', 'Kuala Lumpur');
